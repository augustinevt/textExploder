{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notes = exports[\"default\"] = exports.getRandomProgression = exports.getAllChords = void 0;\n\nvar Key = _interopRequireWildcard(require(\"tonal-key\"));\n\nvar Chord = _interopRequireWildcard(require(\"tonal-chord\"));\n\nvar _chordDictionary = require(\"@tonaljs/chord-dictionary\");\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  if (obj != null) {\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n} // import * as Tonal from 'tonal';\n\n\nvar progBank = [[\"I\", \"V\", \"vi\", \"IV\"], [\"V\", \"vi\", \"IV\", \"I\"], [\"vi\", \"IV\", \"I\", \"V\"]];\n\nvar getAllChords = function getAllChords(_ref) {\n  var key = _ref.key,\n      mode = _ref.mode,\n      theme = _ref.theme;\n  var chordNames = Key.chords(\"\".concat(key, \" \").concat(mode));\n  var returnObject = {};\n  chordNames.forEach(function (chordName) {\n    returnObject[chordName] = Chord.notes(chordName).map(function (note) {\n      return note + '4';\n    });\n  });\n  return returnObject;\n};\n\nexports.getAllChords = getAllChords;\n\nvar getRandomProgression = function getRandomProgression(_ref2) {\n  var key = _ref2.key,\n      mode = _ref2.mode,\n      theme = _ref2.theme;\n  var randProgI = Math.floor(Math.random() * progBank.length);\n  var chordNames = Key.chords(\"\".concat(key, \" \").concat(mode), progBank[randProgI]);\n  var chordNotes = chordNames.map(function (chord) {\n    return Chord.notes(chord).map(function (note) {\n      return note + '4';\n    });\n  });\n  return {\n    id: (0, _uuid[\"default\"])(),\n    chordNames: chordNames,\n    chordNotes: chordNotes,\n    theoryAttrs: {\n      key: key,\n      mode: mode,\n      theme: theme,\n      measures: 4\n    }\n  };\n};\n\nexports.getRandomProgression = getRandomProgression;\n\nvar getChords = function getChords() {\n  return (0, _chordDictionary.entries)();\n};\n\nvar _default = {\n  getRandomProgression: getRandomProgression,\n  getAllChords: getAllChords,\n  getChords: getChords\n};\nexports[\"default\"] = _default;\n\nvar notes = function notes() {\n  return Chord.notes('Dm');\n};\n\nexports.notes = notes;","map":null,"metadata":{},"sourceType":"script"}