{"ast":null,"code":"/**\n * [![npm version](https://img.shields.io/npm/v/tonal-roman-numeral.svg?style=flat-square)](https://www.npmjs.com/package/tonal-roman-numeral)\n * [![tonal](https://img.shields.io/badge/tonal-roman-numeral-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-roman-numeral` is a collection of functions to query about tonal keys.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as RomanNumeral from \"tonal-roman-numeral\"\n * // es5\n * const RomanNumeral = require(\"tonal-roman-numeral\")\n *\n * @example\n * RomanNumeral.names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n * RomanNumeral.props('ii7') // => { name: 'ii', type: '7', num: 2, major: false }\n * RomanNumeral.degree(2) // => \"II\"\n * RomanNumeral.degree(2, false) // => \"ii\"\n * @module RomanNumeral\n */\nvar NAMES = \"I II III IV V VI VII\".split(\" \");\nvar NAMES_MINOR = NAMES.map(function (n) {\n  return n.toLowerCase();\n});\nvar REGEX = /^(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\nvar NO_PROPS = {\n  name: null,\n  type: null\n};\n\nvar getNames = function (major) {\n  return major === false ? NAMES_MINOR : NAMES;\n};\n\nvar memo = function (fn, cache) {\n  if (cache === void 0) cache = {};\n  return function (str) {\n    return cache[str] || (cache[str] = fn(str));\n  };\n};\n\nvar properties = function (str) {\n  var m = REGEX.exec(str);\n\n  if (!m) {\n    return NO_PROPS;\n  }\n\n  var name = m[1];\n  var type = m[2];\n  var n = name.toUpperCase();\n  var major = name === n;\n  var decimal = NAMES.indexOf(n) + 1;\n  return {\n    name: name,\n    type: type,\n    decimal: decimal,\n    major: major\n  };\n};\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n *\n * @example\n * props(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n\n\nexport var props = memo(properties);\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n * names(false) // => [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"]\n */\n\nexport var names = function (isMajor) {\n  return getNames(isMajor).slice();\n};\n/**\n * Get roman numeral name of a string or null if not valid roman numeral\n *\n * @function\n * @param {string} name\n * @return {string}\n *\n * @example\n * name('IIb7') // => 'II\n * name('iii') // => 'iii'\n * name('Ii') // => null (mixed case not allowed)\n */\n\nexport var name = function (str) {\n  return props(str).name;\n};\n/**\n * Get type of a roman numeral\n *\n * @function\n * @param {string} name\n * @return {string}\n *\n * @example\n * type('Imaj7') // => 'maj7'\n */\n\nexport var type = function (str) {\n  return props(str).type;\n};\n/**\n * Get roman numeral number in decimal integer (it accepts numbers from 1 to 7)\n *\n *\n * @function\n * @param {string|number} name - roman numeral name (with optional type)\n * @return {number}\n *\n * @example\n * decimal('IVmaj7') // => 4\n * decimal(4) // => 4\n * decimal(10) // => null\n */\n\nexport var decimal = function (val) {\n  return val > 0 && val < 8 ? val : props(val).decimal || null;\n};\n/**\n * Get a roman numeral from a degree number\n *\n * @function\n * @param {number} degree\n * @param {boolean} [isMajor=true]\n * @return {string} the roman numeral\n *\n * @example\n * fromDegree(2) // => \"II\"\n * fromDegree(2, false) // => \"ii\"\n */\n\nexport var fromDegree = function (degree, isMajor) {\n  return getNames(isMajor)[degree - 1] || null;\n};","map":null,"metadata":{},"sourceType":"module"}