{"ast":null,"code":"import _defineProperty from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/augustinevontrapp/hustle2019/component-tester/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  border: solid;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 80%;\\n  /* border: solid; */\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  /* border: 1px solid red; */\\n  display: flex;\\n  width: 100%;\\n  flex-wrap: wrap;\\n\\n  /* width: 100%;\\n  height: 100%; */\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  /* border: solid; */\\n  width: 100%;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components'; // import logo from './logo.svg';\n\nimport './App.css';\nimport MusicUI from 'sequencer';\nimport Khord from 'chord-generator';\nconst chordGenerator = Khord.chordGenerator,\n      patternMaker = Khord.patternMaker;\nconst playWorkbench = patternMaker.playWorkbench,\n      stopWorkbench = patternMaker.stopWorkbench;\nconst getRandomProgression = chordGenerator.getRandomProgression,\n      getAllChords = chordGenerator.getAllChords,\n      chordNotes = chordGenerator.chordNotes;\nconst ProgressionChordOptions = MusicUI.ProgressionChordOptions,\n      ProgressionWorkbench = MusicUI.ProgressionWorkbench,\n      ProgressionPatternOptions = MusicUI.ProgressionPatternOptions;\nconst Workbench = styled.div(_templateObject());\nconst Options = styled.div(_templateObject2());\nconst Wrapper = styled.div(_templateObject3());\nconst AppWrapper = styled.div(_templateObject4());\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        chords = _useState2[0],\n        setChords = _useState2[1];\n\n  const _useState3 = useState('D'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        key = _useState4[0],\n        setKey = _useState4[1];\n\n  const _useState5 = useState('mixolydian'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mode = _useState6[0],\n        setMode = _useState6[1];\n\n  const _useState7 = useState(120),\n        _useState8 = _slicedToArray(_useState7, 2),\n        tempo = _useState8[0],\n        setTempo = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        chordPattern = _useState10[0],\n        setChordPattern = _useState10[1];\n\n  const _useState11 = useState(0),\n        _useState12 = _slicedToArray(_useState11, 2),\n        activeIndex = _useState12[0],\n        setActiveIndex = _useState12[1];\n\n  return React.createElement(AppWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Options, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(ProgressionChordOptions, {\n    keyVal: key,\n    modeVal: mode,\n    tempoVal: tempo,\n    onKeyChange: value => setKey(value),\n    onModeChange: value => setMode(value),\n    onTempoChange: value => setTempo(parseInt(value)),\n    onSubmit: () => setChords(getRandomProgression({\n      key,\n      mode,\n      tempo,\n      theme: null\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(ProgressionPatternOptions, {\n    onChange: pattern => {\n      setChordPattern(pattern);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(Workbench, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(ProgressionWorkbench, {\n    getKeyChords: () => getAllChords({\n      mode,\n      key\n    }),\n    changeChord: ({\n      name,\n      notes,\n      index\n    }) => {\n      const newChords = _objectSpread({}, chords);\n\n      const newNotes = chordNotes(name);\n      newChords.chordNames[index] = name;\n      newChords.chordNotes[index] = newNotes;\n      setChords(newChords);\n    },\n    addChord: ({\n      name,\n      notes,\n      index\n    }) => {\n      const newChords = _objectSpread({}, chords);\n\n      const newNotes = chordNotes(name);\n      newChords.chordNames.splice(index + 1, 0, name);\n      newChords.chordNotes.splice(index + 1, 0, newNotes);\n      setChords(newChords);\n    },\n    removeChord: index => {\n      const newChords = _objectSpread({}, chords);\n\n      newChords.chordNames.splice(index, 1);\n      newChords.chordNotes.splice(index, 1);\n      setChords(newChords);\n    },\n    chords: chords.chordNames,\n    play: () => playWorkbench({\n      sections: [chords],\n      stateUpdater: i => {\n        setActiveIndex(i);\n      },\n      params: {\n        pattern: chordPattern,\n        tempo\n      }\n    }),\n    activeIndex: activeIndex,\n    stop: stopWorkbench,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/augustinevontrapp/hustle2019/component-tester/src/App.js"],"names":["React","useState","styled","MusicUI","Khord","chordGenerator","patternMaker","playWorkbench","stopWorkbench","getRandomProgression","getAllChords","chordNotes","ProgressionChordOptions","ProgressionWorkbench","ProgressionPatternOptions","Workbench","div","Options","Wrapper","AppWrapper","App","chords","setChords","key","setKey","mode","setMode","tempo","setTempo","chordPattern","setChordPattern","activeIndex","setActiveIndex","value","parseInt","theme","pattern","name","notes","index","newChords","newNotes","chordNames","splice","sections","stateUpdater","i","params"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport MusicUI from 'sequencer'\nimport Khord from 'chord-generator'\n\nconst { chordGenerator, patternMaker } = Khord\n\nconst {\n  playWorkbench,\n  stopWorkbench,\n} = patternMaker\n\nconst {\n  getRandomProgression,\n  getAllChords,\n  chordNotes\n} = chordGenerator;\n\nconst {\n  ProgressionChordOptions,\n  ProgressionWorkbench,\n  ProgressionPatternOptions,\n} = MusicUI\n\nconst Workbench = styled.div`\n  /* border: solid; */\n  width: 100%;\n`\nconst Options = styled.div`\n  /* border: 1px solid red; */\n  display: flex;\n  width: 100%;\n  flex-wrap: wrap;\n\n  /* width: 100%;\n  height: 100%; */\n`\n\nconst Wrapper = styled.div`\n  width: 80%;\n  /* border: solid; */\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nconst AppWrapper = styled.div`\n  border: solid;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nfunction App() {\n\n  const [chords, setChords] = useState([])\n  const [key, setKey] = useState('D')\n  const [mode, setMode] = useState('mixolydian')\n  const [tempo, setTempo] = useState(120)\n  const [chordPattern, setChordPattern] = useState([])\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  return (\n    <AppWrapper>\n      <Wrapper>\n\n\n        <Options>\n\n          <ProgressionChordOptions\n            keyVal={key}\n            modeVal={mode}\n            tempoVal={tempo}\n            onKeyChange={ value => setKey(value) }\n            onModeChange={ value => setMode(value)}\n            onTempoChange={ value => setTempo(parseInt(value))}\n            onSubmit={\n              () => setChords(getRandomProgression(\n                { key, mode, tempo, theme: null }\n              ))\n            }\n          />\n\n          <ProgressionPatternOptions\n            onChange={(pattern) => {setChordPattern(pattern)}}\n          />\n        </Options>\n\n        <Workbench>\n          <ProgressionWorkbench\n            getKeyChords={() => getAllChords({mode, key})}\n            changeChord={({name, notes, index}) => {\n              const newChords = {...chords}\n              const newNotes = chordNotes(name)\n              newChords.chordNames[index] = name\n              newChords.chordNotes[index] = newNotes\n              setChords(newChords)\n            }}\n            addChord={\n              ({name, notes, index}) => {\n                const newChords = {...chords}\n                const newNotes = chordNotes(name)\n                newChords.chordNames.splice(index+1,0,name)\n                newChords.chordNotes.splice(index+1,0,newNotes)\n                setChords(newChords)\n              }\n            }\n            removeChord={(index) => {\n              const newChords = {...chords}\n              newChords.chordNames.splice(index,1)\n              newChords.chordNotes.splice(index,1)\n              setChords(newChords)\n            }}\n            chords={chords.chordNames}\n            play={() => playWorkbench({\n              sections: [chords],\n              stateUpdater: (i) => {setActiveIndex(i)},\n              params: { pattern: chordPattern, tempo }\n            })}\n            activeIndex={activeIndex}\n            stop={stopWorkbench}\n          />\n        </Workbench>\n\n\n      </Wrapper>\n\n\n\n    </AppWrapper>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}