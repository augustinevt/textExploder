{"ast":null,"code":"import _defineProperty from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/augustinevontrapp/hustle2019/component-tester/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  border: solid;\\n  display: flex;\\n  /* height: 25vh; */\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  border-left: solid;\\n  width: 100%;\\n  height: 100%;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  /* border: solid; */\\n  width: 100%;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components'; // import logo from './logo.svg';\n\nimport './App.css';\nimport MusicUI from 'sequencer';\nimport Khord from 'chord-generator';\nconst chordGenerator = Khord.chordGenerator,\n      patternMaker = Khord.patternMaker;\nconst playWorkbench = patternMaker.playWorkbench,\n      stopWorkbench = patternMaker.stopWorkbench;\nconst getRandomProgression = chordGenerator.getRandomProgression,\n      getAllChords = chordGenerator.getAllChords,\n      chordNotes = chordGenerator.chordNotes;\nconst ProgressionChordOptions = MusicUI.ProgressionChordOptions,\n      ProgressionWorkbench = MusicUI.ProgressionWorkbench,\n      ProgressionPatternOptions = MusicUI.ProgressionPatternOptions,\n      ChordBuilder = MusicUI.ChordBuilder;\nconst Workbench = styled.div(_templateObject());\nconst Options = styled.div(_templateObject2());\nconst Wrapper = styled.div(_templateObject3());\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        chords = _useState2[0],\n        setChords = _useState2[1];\n\n  const _useState3 = useState('D'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        key = _useState4[0],\n        setKey = _useState4[1];\n\n  const _useState5 = useState('mixolydian'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mode = _useState6[0],\n        setMode = _useState6[1];\n\n  const _useState7 = useState(120),\n        _useState8 = _slicedToArray(_useState7, 2),\n        tempo = _useState8[0],\n        setTempo = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        chordPattern = _useState10[0],\n        setChordPattern = _useState10[1];\n\n  console.log(chords);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Workbench, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(ProgressionWorkbench, {\n    getKeyChords: () => getAllChords({\n      mode,\n      key\n    }),\n    changeChord: ({\n      name,\n      notes,\n      index\n    }) => {\n      const newChords = _objectSpread({}, chords);\n\n      const newNotes = chordNotes(name);\n      console.log(\"NEW NOTES\", newNotes);\n      newChords.chordNames[index] = name;\n      newChords.chordNotes[index] = newNotes;\n      setChords(newChords);\n    },\n    addChord: ({\n      name,\n      notes,\n      index\n    }) => {\n      const newChords = _objectSpread({}, chords);\n\n      const newNotes = chordNotes(name);\n      newChords.chordNames.splice(index + 1, 0, name);\n      newChords.chordNotes.splice(index + 1, 0, newNotes);\n      setChords(newChords);\n    },\n    removeChord: index => {\n      const newChords = _objectSpread({}, chords);\n\n      newChords.chordNames.splice(index, 1);\n      newChords.chordNotes.splice(index, 1);\n      setChords(newChords);\n    },\n    chords: chords.chordNames,\n    play: () => playWorkbench({\n      sections: [chords],\n      stateUpdater: () => {\n        console.log('update');\n      },\n      params: {\n        pattern: chordPattern,\n        tempo\n      }\n    }),\n    stop: stopWorkbench,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), React.createElement(Options, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(ProgressionPatternOptions, {\n    onChange: pattern => {\n      setChordPattern(pattern);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(ProgressionChordOptions, {\n    onSubmit: () => setChords(getRandomProgression({\n      key,\n      mode,\n      tempo,\n      theme: null\n    })),\n    onKeyChange: ({\n      target: {\n        value\n      }\n    }) => setKey(value),\n    onModeChange: ({\n      target: {\n        value\n      }\n    }) => setMode(value),\n    onTempoChange: ({\n      target: {\n        value\n      }\n    }) => setTempo(parseInt(value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/augustinevontrapp/hustle2019/component-tester/src/App.js"],"names":["React","useState","styled","MusicUI","Khord","chordGenerator","patternMaker","playWorkbench","stopWorkbench","getRandomProgression","getAllChords","chordNotes","ProgressionChordOptions","ProgressionWorkbench","ProgressionPatternOptions","ChordBuilder","Workbench","div","Options","Wrapper","App","chords","setChords","key","setKey","mode","setMode","tempo","setTempo","chordPattern","setChordPattern","console","log","name","notes","index","newChords","newNotes","chordNames","splice","sections","stateUpdater","params","pattern","theme","target","value","parseInt"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport MusicUI from 'sequencer'\nimport Khord from 'chord-generator'\n\nconst { chordGenerator, patternMaker } = Khord\n\nconst {\n  playWorkbench,\n  stopWorkbench,\n} = patternMaker\n\nconst {\n  getRandomProgression,\n  getAllChords,\n  chordNotes\n} = chordGenerator;\n\nconst {\n  ProgressionChordOptions,\n  ProgressionWorkbench,\n  ProgressionPatternOptions,\n  ChordBuilder\n} = MusicUI\n\nconst Workbench = styled.div`\n  /* border: solid; */\n  width: 100%;\n`\nconst Options = styled.div`\n  border-left: solid;\n  width: 100%;\n  height: 100%;\n`\n\nconst Wrapper = styled.div`\n  border: solid;\n  display: flex;\n  /* height: 25vh; */\n`\n\nfunction App() {\n\n  const [chords, setChords] = useState([])\n  const [key, setKey] = useState('D')\n  const [mode, setMode] = useState('mixolydian')\n  const [tempo, setTempo] = useState(120)\n  const [chordPattern, setChordPattern] = useState([])\n\n  console.log(chords)\n\n  return (\n    <div className=\"App\">\n      <Wrapper>\n\n        <Workbench>\n          <ProgressionWorkbench\n            getKeyChords={() => getAllChords({mode, key})}\n            changeChord={({name, notes, index}) => {\n              const newChords = {...chords}\n              const newNotes = chordNotes(name)\n              console.log(\"NEW NOTES\", newNotes)\n              newChords.chordNames[index] = name\n              newChords.chordNotes[index] = newNotes\n              setChords(newChords)\n            }}\n            addChord={\n              ({name, notes, index}) => {\n                const newChords = {...chords}\n                const newNotes = chordNotes(name)\n                newChords.chordNames.splice(index+1,0,name)\n                newChords.chordNotes.splice(index+1,0,newNotes)\n                setChords(newChords)\n              }\n            }\n            removeChord={(index) => {\n              const newChords = {...chords}\n              newChords.chordNames.splice(index,1)\n              newChords.chordNotes.splice(index,1)\n              setChords(newChords)\n            }}\n            chords={chords.chordNames}\n            play={() => playWorkbench({\n              sections: [chords],\n              stateUpdater: () => {console.log('update')},\n              params: { pattern: chordPattern, tempo }\n            })}\n            stop={stopWorkbench}\n          />\n        </Workbench>\n\n        <Options>\n          <ProgressionPatternOptions\n            onChange={(pattern) => {setChordPattern(pattern)}}\n          />\n          <ProgressionChordOptions\n            onSubmit={\n              () => setChords(getRandomProgression(\n                { key, mode, tempo, theme: null }\n              ))}\n            onKeyChange={ ({target: {value}}) => setKey(value) }\n            onModeChange={ ({target: {value}}) => setMode(value)}\n            onTempoChange={ ({target: {value}}) => setTempo(parseInt(value))}\n          />\n        </Options>\n\n\n      </Wrapper>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}