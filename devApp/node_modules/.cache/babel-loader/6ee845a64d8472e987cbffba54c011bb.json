{"ast":null,"code":"import _slicedToArray from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/augustinevontrapp/hustle2019/component-tester/src/App.js\";\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  border: solid;\\n  display: flex;\\n  height: 25vh;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  border-left: solid;\\n  width: 100%;\\n  height: 100%;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  /* border: solid; */\\n  width: 100%;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components'; // import logo from './logo.svg';\n\nimport './App.css';\nimport MusicUI from 'sequencer';\nimport Khord from 'chord-generator';\nconst chordGenerator = Khord.chordGenerator,\n      patternMaker = Khord.patternMaker;\nconst playWorkbench = patternMaker.playWorkbench,\n      stopWorkbench = patternMaker.stopWorkbench;\nconst getRandomProgression = chordGenerator.getRandomProgression,\n      getAllChords = chordGenerator.getAllChords;\nconst ProgressionChordOptions = MusicUI.ProgressionChordOptions,\n      ProgressionWorkbench = MusicUI.ProgressionWorkbench,\n      ProgressionPatternOptions = MusicUI.ProgressionPatternOptions;\nconst Workbench = styled.div(_templateObject());\nconst Options = styled.div(_templateObject2());\nconst Wrapper = styled.div(_templateObject3());\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        chords = _useState2[0],\n        setChords = _useState2[1];\n\n  const _useState3 = useState('D'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        key = _useState4[0],\n        setKey = _useState4[1];\n\n  const _useState5 = useState('mixolydian'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mode = _useState6[0],\n        setMode = _useState6[1];\n\n  const _useState7 = useState('1'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        measureCount = _useState8[0],\n        setMeasureCount = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        chordPattern = _useState10[0],\n        setChordPattern = _useState10[1];\n\n  console.log(getAllChords({\n    key,\n    mode\n  }));\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Workbench, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(ProgressionWorkbench, {\n    getKeyChords: () => getAllChords({\n      mode,\n      key\n    }),\n    chords: chords.chordNames,\n    play: () => playWorkbench({\n      sections: [chords],\n      stateUpdater: () => {\n        console.log('update');\n      },\n      params: {\n        pattern: chordPattern,\n        measureCount\n      }\n    }),\n    stop: stopWorkbench,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(Options, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(ProgressionPatternOptions, {\n    onChange: pattern => {\n      setChordPattern(pattern);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(ProgressionChordOptions, {\n    onSubmit: () => setChords(getRandomProgression({\n      key,\n      mode,\n      measureCount,\n      theme: null\n    })),\n    onKeyChange: ({\n      target: {\n        value\n      }\n    }) => setKey(value),\n    onModeChange: ({\n      target: {\n        value\n      }\n    }) => setMode(value),\n    onMeasureCountChange: ({\n      target: {\n        value\n      }\n    }) => setMeasureCount(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/augustinevontrapp/hustle2019/component-tester/src/App.js"],"names":["React","useState","styled","MusicUI","Khord","chordGenerator","patternMaker","playWorkbench","stopWorkbench","getRandomProgression","getAllChords","ProgressionChordOptions","ProgressionWorkbench","ProgressionPatternOptions","Workbench","div","Options","Wrapper","App","chords","setChords","key","setKey","mode","setMode","measureCount","setMeasureCount","chordPattern","setChordPattern","console","log","chordNames","sections","stateUpdater","params","pattern","theme","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport MusicUI from 'sequencer'\nimport Khord from 'chord-generator'\n\nconst { chordGenerator, patternMaker } = Khord\n\nconst {\n  playWorkbench,\n  stopWorkbench,\n} = patternMaker\n\nconst {\n  getRandomProgression,\n  getAllChords\n} = chordGenerator;\n\nconst {\n  ProgressionChordOptions,\n  ProgressionWorkbench,\n  ProgressionPatternOptions\n} = MusicUI\n\nconst Workbench = styled.div`\n  /* border: solid; */\n  width: 100%;\n`\nconst Options = styled.div`\n  border-left: solid;\n  width: 100%;\n  height: 100%;\n`\n\nconst Wrapper = styled.div`\n  border: solid;\n  display: flex;\n  height: 25vh;\n`\n\nfunction App() {\n\n  const [chords, setChords] = useState([])\n  const [key, setKey] = useState('D')\n  const [mode, setMode] = useState('mixolydian')\n  const [measureCount, setMeasureCount] = useState('1')\n  const [chordPattern, setChordPattern] = useState([])\n\n  console.log(getAllChords({key,mode}))\n\n  return (\n    <div className=\"App\">\n      <Wrapper>\n\n        <Workbench>\n          <ProgressionWorkbench\n            getKeyChords={() => getAllChords({mode, key})}\n            chords={chords.chordNames}\n            play={() => playWorkbench({\n              sections: [chords],\n              stateUpdater: () => {console.log('update')},\n              params: { pattern: chordPattern, measureCount}\n            })}\n            stop={stopWorkbench}\n          />\n        </Workbench>\n\n        <Options>\n          <ProgressionPatternOptions\n            onChange={(pattern) => {setChordPattern(pattern)}}\n          />\n          <ProgressionChordOptions\n            onSubmit={\n              () => setChords(getRandomProgression(\n                { key, mode, measureCount, theme: null }\n              ))}\n            onKeyChange={ ({target: {value}}) => setKey(value) }\n            onModeChange={ ({target: {value}}) => setMode(value)}\n            onMeasureCountChange={ ({target: {value}}) => setMeasureCount(value)}\n          />\n        </Options>\n\n      </Wrapper>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}