{"ast":null,"code":"import _slicedToArray from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/augustinevontrapp/hustle2019/component-tester/src/App.js\";\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  border: solid;\\n  display: flex;\\n  height: 25vh;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  border-left: solid;\\n  width: 100%;\\n  height: 100%;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  /* border: solid; */\\n  width: 100%;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components'; // import logo from './logo.svg';\n\nimport './App.css';\nimport MusicUI from 'sequencer';\nimport Khord from 'chord-generator';\nconst chordGenerator = Khord.chordGenerator,\n      patternMaker = Khord.patternMaker;\nconst playWorkbench = patternMaker.playWorkbench,\n      stopWorkbench = patternMaker.stopWorkbench;\nconst getRandomProgression = chordGenerator.getRandomProgression;\nconst ProgressionChordOptions = MusicUI.ProgressionChordOptions,\n      ProgressionWorkbench = MusicUI.ProgressionWorkbench,\n      ProgressionPatternOptions = MusicUI.ProgressionPatternOptions;\nconst Workbench = styled.div(_templateObject());\nconst Options = styled.div(_templateObject2());\nconst Wrapper = styled.div(_templateObject3());\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        chords = _useState2[0],\n        setChords = _useState2[1];\n\n  const _useState3 = useState('D'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        key = _useState4[0],\n        setKey = _useState4[1];\n\n  const _useState5 = useState('mixolydian'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mode = _useState6[0],\n        setMode = _useState6[1];\n\n  console.log(getRandomProgression({\n    key,\n    mode,\n    theme: null\n  }));\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Workbench, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(ProgressionWorkbench, {\n    chords: chords.chordNames,\n    play: () => playWorkbench({\n      chords,\n      updater: () => {\n        console.log('update');\n      },\n      pattern: 'chacha'\n    }),\n    stop: stopWorkbench,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(Options, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(ProgressionPatternOptions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(ProgressionChordOptions, {\n    onSubmit: () => setChords(getRandomProgression({\n      key,\n      mode,\n      theme: null\n    })),\n    onKeyChange: ({\n      target: {\n        value\n      }\n    }) => setKey(value),\n    onModeChange: ({\n      target: {\n        value\n      }\n    }) => setMode(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/augustinevontrapp/hustle2019/component-tester/src/App.js"],"names":["React","useState","styled","MusicUI","Khord","chordGenerator","patternMaker","playWorkbench","stopWorkbench","getRandomProgression","ProgressionChordOptions","ProgressionWorkbench","ProgressionPatternOptions","Workbench","div","Options","Wrapper","App","chords","setChords","key","setKey","mode","setMode","console","log","theme","chordNames","updater","pattern","target","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;;AACA,OAAO,WAAP;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;MAEQC,c,GAAiCD,K,CAAjCC,c;MAAgBC,Y,GAAiBF,K,CAAjBE,Y;MAGtBC,a,GAEED,Y,CAFFC,a;MACAC,a,GACEF,Y,CADFE,a;MAIAC,oB,GACEJ,c,CADFI,oB;MAIAC,uB,GAGEP,O,CAHFO,uB;MACAC,oB,GAEER,O,CAFFQ,oB;MACAC,yB,GACET,O,CADFS,yB;AAGF,MAAMC,SAAS,GAAGX,MAAM,CAACY,GAAV,mBAAf;AAIA,MAAMC,OAAO,GAAGb,MAAM,CAACY,GAAV,oBAAb;AAMA,MAAME,OAAO,GAAGd,MAAM,CAACY,GAAV,oBAAb;;AAMA,SAASG,GAAT,GAAe;AAAA,oBAEehB,QAAQ,CAAC,EAAD,CAFvB;AAAA;AAAA,QAENiB,MAFM;AAAA,QAEEC,SAFF;;AAAA,qBAGSlB,QAAQ,CAAC,GAAD,CAHjB;AAAA;AAAA,QAGNmB,GAHM;AAAA,QAGDC,MAHC;;AAAA,qBAIWpB,QAAQ,CAAC,YAAD,CAJnB;AAAA;AAAA,QAINqB,IAJM;AAAA,QAIAC,OAJA;;AAMbC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,oBAAoB,CAAC;AAC/BW,IAAAA,GAD+B;AAE/BE,IAAAA,IAF+B;AAG/BI,IAAAA,KAAK,EAAE;AAHwB,GAAD,CAAhC;AAMA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,oBAAD;AACE,IAAA,MAAM,EAAER,MAAM,CAACS,UADjB;AAEE,IAAA,IAAI,EAAE,MAAMpB,aAAa,CAAC;AACxBW,MAAAA,MADwB;AAExBU,MAAAA,OAAO,EAAE,MAAM;AAACJ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAAsB,OAFd;AAGxBI,MAAAA,OAAO,EAAE;AAHe,KAAD,CAF3B;AAQE,IAAA,IAAI,EAAErB,aARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAeE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,uBAAD;AACE,IAAA,QAAQ,EACN,MAAMW,SAAS,CAACV,oBAAoB,CAClC;AAAEW,MAAAA,GAAF;AAAOE,MAAAA,IAAP;AAAaI,MAAAA,KAAK,EAAE;AAApB,KADkC,CAArB,CAFnB;AAKE,IAAA,WAAW,EAAG,CAAC;AAACI,MAAAA,MAAM,EAAE;AAACC,QAAAA;AAAD;AAAT,KAAD,KAAuBV,MAAM,CAACU,KAAD,CAL7C;AAME,IAAA,YAAY,EAAG,CAAC;AAACD,MAAAA,MAAM,EAAE;AAACC,QAAAA;AAAD;AAAT,KAAD,KAAuBR,OAAO,CAACQ,KAAD,CAN/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAfF,CADF,CADF;AAiCD;;AAED,eAAed,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport MusicUI from 'sequencer'\nimport Khord from 'chord-generator'\n\nconst { chordGenerator, patternMaker } = Khord\n\nconst {\n  playWorkbench,\n  stopWorkbench\n} = patternMaker\n\nconst {\n  getRandomProgression\n} = chordGenerator;\n\nconst {\n  ProgressionChordOptions,\n  ProgressionWorkbench,\n  ProgressionPatternOptions\n} = MusicUI\n\nconst Workbench = styled.div`\n  /* border: solid; */\n  width: 100%;\n`\nconst Options = styled.div`\n  border-left: solid;\n  width: 100%;\n  height: 100%;\n`\n\nconst Wrapper = styled.div`\n  border: solid;\n  display: flex;\n  height: 25vh;\n`\n\nfunction App() {\n\n  const [chords, setChords] = useState([])\n  const [key, setKey] = useState('D')\n  const [mode, setMode] = useState('mixolydian')\n\n  console.log(getRandomProgression({\n    key,\n    mode,\n    theme: null\n  }\n  ))\n  return (\n    <div className=\"App\">\n      <Wrapper>\n\n        <Workbench>\n          <ProgressionWorkbench\n            chords={chords.chordNames}\n            play={() => playWorkbench({\n              chords,\n              updater: () => {console.log('update')},\n              pattern: 'chacha'\n\n            })}\n            stop={stopWorkbench}\n          />\n        </Workbench>\n\n        <Options>\n          <ProgressionPatternOptions/>\n          <ProgressionChordOptions\n            onSubmit={\n              () => setChords(getRandomProgression(\n                { key, mode, theme: null }\n              ))}\n            onKeyChange={ ({target: {value}}) => setKey(value) }\n            onModeChange={ ({target: {value}}) => setMode(value)}\n          />\n        </Options>\n\n      </Wrapper>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}