{"ast":null,"code":"import _slicedToArray from \"/Users/augustinevontrapp/hustle2019/component-tester/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { note, transpose, coordToNote } from '@tonaljs/tonal';\nexport { tokenizeNote as tokenize } from '@tonaljs/tonal';\nimport { midiToNoteName } from '@tonaljs/midi';\n\nconst toNoteName = sameAccidentals => noteName => {\n  const n = note(noteName);\n\n  if (n.empty) {\n    return \"\";\n  }\n\n  const sharps = sameAccidentals ? n.alt > 0 : n.alt < 0;\n  const pitchClass = n.midi === null;\n  return midiToNoteName(n.midi || n.chroma, {\n    sharps,\n    pitchClass\n  });\n};\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplfied note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\n\n\nconst simplify = toNoteName(true);\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @return {string} the enhramonic note or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enhramonic(\"C\") // => \"C\"\r\n */\n\nconst enharmonic = toNoteName(false);\n/**\r\n * Transpose by an interval\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\n\nconst transposeBy = interval => note => transpose(note, interval);\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\n\n\nconst transposeFrom = note => interval => transpose(note, interval);\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\n\n\nfunction transposeFifths(noteName, fifths) {\n  const n = note(noteName);\n\n  if (n.empty) {\n    return \"\";\n  }\n\n  const _n$coord = _slicedToArray(n.coord, 2),\n        nFifths = _n$coord[0],\n        nOcts = _n$coord[1];\n\n  const transposed = nOcts === undefined ? coordToNote([nFifths + fifths]) : coordToNote([nFifths + fifths, nOcts]);\n  return transposed.name;\n}\n\nexport { enharmonic, simplify, transposeBy, transposeFifths, transposeFrom };","map":null,"metadata":{},"sourceType":"module"}